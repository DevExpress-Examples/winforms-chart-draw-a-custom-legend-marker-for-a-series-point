Imports CustomSeriesPointDrawingSample.Model
Imports DevExpress.XtraCharts
Imports System
Imports System.Collections.Generic
Imports System.Data
Imports System.Drawing
Imports System.Drawing.Drawing2D
Imports System.IO
Imports System.Linq
Imports System.Windows.Forms

Namespace CustomSeriesPointDrawingSample

    Public Partial Class Form1
        Inherits System.Windows.Forms.Form

        Private trackedPointArgument As Object

        Private photoCache As System.Collections.Generic.Dictionary(Of String, System.Drawing.Image) = New System.Collections.Generic.Dictionary(Of String, System.Drawing.Image)()

#Region "#Constants"
        Const borderSize As Integer = 5

        Const scaledPhotoWidth As Integer = 48

        Const scaledPhotoHeight As Integer = 51

        ' Width and height of scaled photo with border.
        Const totalWidth As Integer = 58

        Const totalHeight As Integer = 61

        ' Rects required to create a custom legend series marker.
        Private Shared ReadOnly photoRect As System.Drawing.Rectangle = New System.Drawing.Rectangle(CustomSeriesPointDrawingSample.Form1.borderSize, CustomSeriesPointDrawingSample.Form1.borderSize, CustomSeriesPointDrawingSample.Form1.scaledPhotoWidth, CustomSeriesPointDrawingSample.Form1.scaledPhotoHeight)

        Private Shared ReadOnly totalRect As System.Drawing.Rectangle = New System.Drawing.Rectangle(0, 0, CustomSeriesPointDrawingSample.Form1.totalWidth, CustomSeriesPointDrawingSample.Form1.totalHeight)

#End Region
        Public Sub New()
            Me.InitializeComponent()
        End Sub

#Region "#ChartPreparation"
        Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs)
            AddHandler Me.chart.CustomDrawSeriesPoint, AddressOf Me.OnCustomDrawSeriesPoint
            AddHandler Me.chart.BoundDataChanged, AddressOf Me.OnBoundDataChanged
            AddHandler Me.chart.ObjectHotTracked, AddressOf Me.OnObjectHotTracked
            Using context = New CustomSeriesPointDrawingSample.Model.NwindDbContext()
                Me.chart.DataSource = Me.PrepareDataSource(context.Orders)
                Me.InitPhotoCache(context.Employees)
            End Using

            Me.chart.SeriesDataMember = "Year"
            Me.chart.SeriesTemplate.ArgumentDataMember = "Employee"
            Me.chart.SeriesTemplate.ValueDataMembers.AddRange("Value")
            Me.chart.SeriesTemplate.ToolTipPointPattern = "{S}: {A} ({VP:P})"
            Me.chart.SeriesTemplate.SeriesPointsSorting = DevExpress.XtraCharts.SortingMode.Ascending
        End Sub

#End Region
#Region "#AutogeneratedSeriesModifying"
        Private Sub OnBoundDataChanged(ByVal sender As Object, ByVal e As System.EventArgs)
            If Me.chart.Series.Count <= 1 Then Return
            Dim i As Integer = 1
            While i < Me.chart.Series.Count
                Me.chart.Series(CInt((i))).ShowInLegend = False
                Call System.Threading.Interlocked.Increment(i)
            End While
        End Sub

#End Region
#Region "#CustomPointDrawing"
        Private Sub OnCustomDrawSeriesPoint(ByVal sender As Object, ByVal e As DevExpress.XtraCharts.CustomDrawSeriesPointEventArgs)
            ' Design a series marker image.
            Dim image As System.Drawing.Bitmap = New System.Drawing.Bitmap(CustomSeriesPointDrawingSample.Form1.totalWidth, CustomSeriesPointDrawingSample.Form1.totalHeight)
            Dim isSelected As Boolean = Me.trackedPointArgument IsNot Nothing AndAlso e.SeriesPoint.Argument.Equals(Me.trackedPointArgument)
            Using graphics As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(image)
                Using fillBrush = If(isSelected, CType(New System.Drawing.Drawing2D.HatchBrush(System.Drawing.Drawing2D.HatchStyle.DarkDownwardDiagonal, e.LegendDrawOptions.Color, e.LegendDrawOptions.ActualColor2), System.Drawing.Brush), CType(New System.Drawing.SolidBrush(e.LegendDrawOptions.Color), System.Drawing.Brush))
                    graphics.FillRectangle(fillBrush, CustomSeriesPointDrawingSample.Form1.totalRect)
                End Using

                Dim photo As System.Drawing.Image
                If Me.photoCache.TryGetValue(e.SeriesPoint.Argument, photo) Then graphics.DrawImage(photo, CustomSeriesPointDrawingSample.Form1.photoRect)
            End Using

            e.LegendMarkerImage = image
            e.DisposeLegendMarkerImage = True
            Dim options As DevExpress.XtraCharts.PieDrawOptions = TryCast(e.SeriesDrawOptions, DevExpress.XtraCharts.PieDrawOptions)
            If isSelected AndAlso options IsNot Nothing Then
                options.FillStyle.FillMode = DevExpress.XtraCharts.FillMode.Hatch
                CType(options.FillStyle.Options, DevExpress.XtraCharts.HatchFillOptions).HatchStyle = System.Drawing.Drawing2D.HatchStyle.DarkDownwardDiagonal
            End If
        End Sub

#End Region
        Private Sub OnObjectHotTracked(ByVal sender As Object, ByVal e As DevExpress.XtraCharts.HotTrackEventArgs)
            Me.trackedPointArgument = If(e.HitInfo.InSeriesPoint, e.HitInfo.SeriesPoint.Argument, Nothing)
            Me.chart.Invalidate()
        End Sub

        Private Sub InitPhotoCache(ByVal employees As System.Collections.Generic.IEnumerable(Of CustomSeriesPointDrawingSample.Model.Employee))
            Me.photoCache.Clear()
            For Each employee In employees
                Using stream As System.IO.MemoryStream = New System.IO.MemoryStream(employee.Photo)
                    If Not Me.photoCache.ContainsKey(employee.FullName) Then Me.photoCache.Add(employee.FullName, System.Drawing.Image.FromStream(stream))
                End Using
            Next
        End Sub

        Private Function PrepareDataSource(ByVal orders As System.Collections.Generic.IEnumerable(Of CustomSeriesPointDrawingSample.Model.Order)) As List(Of SalesPoint)
            Dim query = From o In orders Group o By __groupByKey1__ = New With {.Year = o.OrderDate.Year, .Employee = o.Employee.FirstName & " " & o.Employee.LastName} Into g = Group Select New With {.Employee = __groupByKey1__.Employee, .Year = __groupByKey1__.Year, .Values = g.[Select](Function(o) If(o.Freight.HasValue, o.Freight.Value, 0))}
            Dim points As System.Collections.Generic.List(Of SalesPoint) = New System.Collections.Generic.List(Of SalesPoint)()
            For Each item In query
                points.Add(New SalesPoint With {.Employee = item.Employee, .Year = item.Year, .Value = item.Values.Aggregate(Function(d1, d2) d1 + d2)})
            Next

            Return points
        End Function
    End Class
End Namespace

Friend Class SalesPoint

    Public Property Employee As String

    Public Property Year As Integer

    Public Property Value As Decimal
End Class
